package openapi2

// This file was automatically generated by gentypes.go
// DO NOT EDIT MANUALLY. All changes will be lost

import (
	"sync"
)

type mapIteratorItem struct {
	item interface{}
	key  interface{}
}

type mapIterator struct {
	list listIterator
}

func (iter *mapIterator) Next() bool {
	return iter.list.Next()
}

func (iter *mapIterator) Size() int {
	return iter.list.Size()
}

func (iter *mapIterator) Item() *mapIteratorItem {
	v := iter.list.Item()
	if v == nil {
		return nil
	}
	return v.(*mapIteratorItem)
}

type listIterator struct {
	mu    sync.RWMutex
	items []interface{}
	size  int
}

// Size returns the size of the iterator. This size
// is fixed at creation time. It does not represent
// the remaining number of items
func (iter *listIterator) Size() int {
	return iter.size
}

// Item returns the next item in this iterator
func (iter *listIterator) Item() interface{} {
	iter.mu.Lock()
	defer iter.mu.Unlock()

	if !iter.nextNoLock() {
		return nil
	}

	item := iter.items[0]
	iter.items = iter.items[1:]
	return item
}

func (iter *listIterator) nextNoLock() bool {
	return len(iter.items) > 0
}

// Next returns true if there are more elements in this iterator
func (iter *listIterator) Next() bool {
	iter.mu.RLock()
	defer iter.mu.RUnlock()
	return iter.nextNoLock()
}

type InterfaceListIterator struct {
	listIterator
}

// Item returns the next item in this iterator. Make sure to call Next()
// before hand to check if the iterator has more items
func (iter *InterfaceListIterator) Item() interface{} {
	return iter.listIterator.Item().(interface{})
}

type StringListIterator struct {
	listIterator
}

// Item returns the next item in this iterator. Make sure to call Next()
// before hand to check if the iterator has more items
func (iter *StringListIterator) Item() string {
	return iter.listIterator.Item().(string)
}

type StringListListIterator struct {
	listIterator
}

// Item returns the next item in this iterator. Make sure to call Next()
// before hand to check if the iterator has more items
func (iter *StringListListIterator) Item() []string {
	return iter.listIterator.Item().([]string)
}

type OperationListIterator struct {
	listIterator
}

// Item returns the next item in this iterator. Make sure to call Next()
// before hand to check if the iterator has more items
func (iter *OperationListIterator) Item() Operation {
	return iter.listIterator.Item().(Operation)
}

type PathItemListIterator struct {
	listIterator
}

// Item returns the next item in this iterator. Make sure to call Next()
// before hand to check if the iterator has more items
func (iter *PathItemListIterator) Item() PathItem {
	return iter.listIterator.Item().(PathItem)
}

type MediaTypeListIterator struct {
	listIterator
}

// Item returns the next item in this iterator. Make sure to call Next()
// before hand to check if the iterator has more items
func (iter *MediaTypeListIterator) Item() MediaType {
	return iter.listIterator.Item().(MediaType)
}

type ExtensionsIterator struct {
	mapIterator
}

// Item returns the next item in this iterator. Make sure to call Next()
// before hand to check if the iterator has more items
func (iter *ExtensionsIterator) Item() (string, interface{}) {
	item := iter.mapIterator.Item()
	if item == nil {
		return "", interface{}(nil)
	}
	return item.key.(string), item.item.(interface{})
}

type ExampleMapIterator struct {
	mapIterator
}

// Item returns the next item in this iterator. Make sure to call Next()
// before hand to check if the iterator has more items
func (iter *ExampleMapIterator) Item() (string, interface{}) {
	item := iter.mapIterator.Item()
	if item == nil {
		return "", interface{}(nil)
	}
	return item.key.(string), item.item.(interface{})
}

type HeaderMapIterator struct {
	mapIterator
}

// Item returns the next item in this iterator. Make sure to call Next()
// before hand to check if the iterator has more items
func (iter *HeaderMapIterator) Item() (string, Header) {
	item := iter.mapIterator.Item()
	if item == nil {
		return "", Header(nil)
	}
	return item.key.(string), item.item.(Header)
}

type InterfaceMapIterator struct {
	mapIterator
}

// Item returns the next item in this iterator. Make sure to call Next()
// before hand to check if the iterator has more items
func (iter *InterfaceMapIterator) Item() (string, interface{}) {
	item := iter.mapIterator.Item()
	if item == nil {
		return "", interface{}(nil)
	}
	return item.key.(string), item.item.(interface{})
}

type MIMETypeListIterator struct {
	listIterator
}

// Item returns the next item in this iterator. Make sure to call Next()
// before hand to check if the iterator has more items
func (iter *MIMETypeListIterator) Item() MIMEType {
	return iter.listIterator.Item().(MIMEType)
}

type ParameterListIterator struct {
	listIterator
}

// Item returns the next item in this iterator. Make sure to call Next()
// before hand to check if the iterator has more items
func (iter *ParameterListIterator) Item() Parameter {
	return iter.listIterator.Item().(Parameter)
}

type ParameterMapIterator struct {
	mapIterator
}

// Item returns the next item in this iterator. Make sure to call Next()
// before hand to check if the iterator has more items
func (iter *ParameterMapIterator) Item() (string, Parameter) {
	item := iter.mapIterator.Item()
	if item == nil {
		return "", Parameter(nil)
	}
	return item.key.(string), item.item.(Parameter)
}

type PathItemMapIterator struct {
	mapIterator
}

// Item returns the next item in this iterator. Make sure to call Next()
// before hand to check if the iterator has more items
func (iter *PathItemMapIterator) Item() (string, PathItem) {
	item := iter.mapIterator.Item()
	if item == nil {
		return "", PathItem(nil)
	}
	return item.key.(string), item.item.(PathItem)
}

type ResponseMapIterator struct {
	mapIterator
}

// Item returns the next item in this iterator. Make sure to call Next()
// before hand to check if the iterator has more items
func (iter *ResponseMapIterator) Item() (string, Response) {
	item := iter.mapIterator.Item()
	if item == nil {
		return "", Response(nil)
	}
	return item.key.(string), item.item.(Response)
}

type SchemaListIterator struct {
	listIterator
}

// Item returns the next item in this iterator. Make sure to call Next()
// before hand to check if the iterator has more items
func (iter *SchemaListIterator) Item() Schema {
	return iter.listIterator.Item().(Schema)
}

type SchemaMapIterator struct {
	mapIterator
}

// Item returns the next item in this iterator. Make sure to call Next()
// before hand to check if the iterator has more items
func (iter *SchemaMapIterator) Item() (string, Schema) {
	item := iter.mapIterator.Item()
	if item == nil {
		return "", Schema(nil)
	}
	return item.key.(string), item.item.(Schema)
}

type SchemeListIterator struct {
	listIterator
}

// Item returns the next item in this iterator. Make sure to call Next()
// before hand to check if the iterator has more items
func (iter *SchemeListIterator) Item() Scheme {
	return iter.listIterator.Item().(Scheme)
}

type ScopesMapIterator struct {
	mapIterator
}

// Item returns the next item in this iterator. Make sure to call Next()
// before hand to check if the iterator has more items
func (iter *ScopesMapIterator) Item() (string, []string) {
	item := iter.mapIterator.Item()
	if item == nil {
		return "", []string(nil)
	}
	return item.key.(string), item.item.([]string)
}

type SecurityRequirementListIterator struct {
	listIterator
}

// Item returns the next item in this iterator. Make sure to call Next()
// before hand to check if the iterator has more items
func (iter *SecurityRequirementListIterator) Item() SecurityRequirement {
	return iter.listIterator.Item().(SecurityRequirement)
}

type SecuritySchemeMapIterator struct {
	mapIterator
}

// Item returns the next item in this iterator. Make sure to call Next()
// before hand to check if the iterator has more items
func (iter *SecuritySchemeMapIterator) Item() (string, SecurityScheme) {
	item := iter.mapIterator.Item()
	if item == nil {
		return "", SecurityScheme(nil)
	}
	return item.key.(string), item.item.(SecurityScheme)
}

type StringMapIterator struct {
	mapIterator
}

// Item returns the next item in this iterator. Make sure to call Next()
// before hand to check if the iterator has more items
func (iter *StringMapIterator) Item() (string, string) {
	item := iter.mapIterator.Item()
	if item == nil {
		return "", ""
	}
	return item.key.(string), item.item.(string)
}

type TagListIterator struct {
	listIterator
}

// Item returns the next item in this iterator. Make sure to call Next()
// before hand to check if the iterator has more items
func (iter *TagListIterator) Item() Tag {
	return iter.listIterator.Item().(Tag)
}
