package openapi2

// This file was automatically generated by gentypes.go
// DO NOT EDIT MANUALLY. All changes will be lost

import (
	"github.com/pkg/errors"
	"sync"
)

var _ = errors.Cause

// SwaggerBuilder is used to build an instance of Swagger. The user must
// call `Build()` after providing all the necessary information to
// build an instance of Swagger.
// Builders may NOT be reused. It must be created for every instance
// of Swagger that you want to create
type SwaggerBuilder struct {
	lock   sync.Locker
	target *swagger
}

// MustBuild is a convenience function for those time when you know that
// the result of the builder must be successful
func (b *SwaggerBuilder) MustBuild(options ...Option) Swagger {
	v, err := b.Build(options...)
	if err != nil {
		panic(err)
	}
	return v
}

// Build finalizes the building process for Swagger and returns the result
// By default, Build() will validate if the given structure is valid
func (b *SwaggerBuilder) Build(options ...Option) (Swagger, error) {
	b.lock.Lock()
	defer b.lock.Unlock()
	if b.target == nil {
		return nil, errors.New(`builder has already been used`)
	}
	validate := true
	for _, option := range options {
		switch option.Name() {
		case optkeyValidate:
			validate = option.Value().(bool)
		}
	}
	if validate {
		if err := b.target.Validate(false); err != nil {
			return nil, errors.Wrap(err, `validation failed`)
		}
	}
	defer func() { b.target = nil }()
	return b.target, nil
}

// NewSwagger creates a new builder object for Swagger
func NewSwagger(info Info, paths Paths, options ...Option) *SwaggerBuilder {
	var lock sync.Locker = &sync.Mutex{}
	for _, option := range options {
		switch option.Name() {
		case optkeyLocker:
			lock = option.Value().(sync.Locker)
		}
	}
	var b SwaggerBuilder
	if lock == nil {
		lock = nilLock{}
	}
	b.lock = lock
	b.target = &swagger{
		version: defaultSwaggerVersion,
		info:    info,
		paths:   paths,
	}
	return &b
}

// Host sets the host field for object Swagger.
func (b *SwaggerBuilder) Host(v string) *SwaggerBuilder {
	b.lock.Lock()
	defer b.lock.Unlock()
	if b.target == nil {
		return b
	}
	b.target.host = v
	return b
}

// BasePath sets the basePath field for object Swagger.
func (b *SwaggerBuilder) BasePath(v string) *SwaggerBuilder {
	b.lock.Lock()
	defer b.lock.Unlock()
	if b.target == nil {
		return b
	}
	b.target.basePath = v
	return b
}

// Schemes sets the schemes field for object Swagger.
func (b *SwaggerBuilder) Schemes(v ...Scheme) *SwaggerBuilder {
	b.lock.Lock()
	defer b.lock.Unlock()
	if b.target == nil {
		return b
	}
	b.target.schemes = v
	return b
}

// Consumes sets the consumes field for object Swagger.
func (b *SwaggerBuilder) Consumes(v ...MIMEType) *SwaggerBuilder {
	b.lock.Lock()
	defer b.lock.Unlock()
	if b.target == nil {
		return b
	}
	b.target.consumes = v
	return b
}

// Produces sets the produces field for object Swagger.
func (b *SwaggerBuilder) Produces(v ...MIMEType) *SwaggerBuilder {
	b.lock.Lock()
	defer b.lock.Unlock()
	if b.target == nil {
		return b
	}
	b.target.produces = v
	return b
}

// Definitions sets the definitions field for object Swagger.
func (b *SwaggerBuilder) Definitions(v InterfaceMap) *SwaggerBuilder {
	b.lock.Lock()
	defer b.lock.Unlock()
	if b.target == nil {
		return b
	}
	b.target.definitions = v
	return b
}

// Parameters sets the parameters field for object Swagger.
func (b *SwaggerBuilder) Parameters(v ParameterMap) *SwaggerBuilder {
	b.lock.Lock()
	defer b.lock.Unlock()
	if b.target == nil {
		return b
	}
	b.target.parameters = v
	return b
}

// Responses sets the responses field for object Swagger.
func (b *SwaggerBuilder) Responses(v ResponseMap) *SwaggerBuilder {
	b.lock.Lock()
	defer b.lock.Unlock()
	if b.target == nil {
		return b
	}
	b.target.responses = v
	return b
}

// SecurityDefinitions sets the securityDefinitions field for object Swagger.
func (b *SwaggerBuilder) SecurityDefinitions(v SecuritySchemeMap) *SwaggerBuilder {
	b.lock.Lock()
	defer b.lock.Unlock()
	if b.target == nil {
		return b
	}
	b.target.securityDefinitions = v
	return b
}

// Security sets the security field for object Swagger.
func (b *SwaggerBuilder) Security(v ...SecurityRequirement) *SwaggerBuilder {
	b.lock.Lock()
	defer b.lock.Unlock()
	if b.target == nil {
		return b
	}
	b.target.security = v
	return b
}

// Tags sets the tags field for object Swagger.
func (b *SwaggerBuilder) Tags(v ...Tag) *SwaggerBuilder {
	b.lock.Lock()
	defer b.lock.Unlock()
	if b.target == nil {
		return b
	}
	b.target.tags = v
	return b
}

// ExternalDocs sets the externalDocs field for object Swagger.
func (b *SwaggerBuilder) ExternalDocs(v ExternalDocumentation) *SwaggerBuilder {
	b.lock.Lock()
	defer b.lock.Unlock()
	if b.target == nil {
		return b
	}
	b.target.externalDocs = v
	return b
}

// Reference sets the $ref (reference) field for object Swagger.
func (b *SwaggerBuilder) Reference(v string) *SwaggerBuilder {
	b.lock.Lock()
	defer b.lock.Unlock()
	if b.target == nil {
		return b
	}
	b.target.reference = v
	return b
}

// Extension sets an arbitrary element (an extension) to the
// object Swagger. The extension name should start with a "x-"
func (b *SwaggerBuilder) Extension(name string, value interface{}) *SwaggerBuilder {
	b.lock.Lock()
	defer b.lock.Unlock()
	if b.target == nil {
		return b
	}
	b.target.extensions[name] = value
	return b
}
