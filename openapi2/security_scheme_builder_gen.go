package openapi2

// This file was automatically generated by gentypes.go
// DO NOT EDIT MANUALLY. All changes will be lost

import (
	"github.com/pkg/errors"
	"sync"
)

var _ = errors.Cause

// SecuritySchemeBuilder is used to build an instance of SecurityScheme. The user must
// call `Build()` after providing all the necessary information to
// build an instance of SecurityScheme.
// Builders may NOT be reused. It must be created for every instance
// of SecurityScheme that you want to create
type SecuritySchemeBuilder struct {
	lock   sync.Locker
	target *securityScheme
}

// MustBuild is a convenience function for those time when you know that
// the result of the builder must be successful
func (b *SecuritySchemeBuilder) MustBuild(options ...Option) SecurityScheme {
	v, err := b.Build(options...)
	if err != nil {
		panic(err)
	}
	return v
}

// Build finalizes the building process for SecurityScheme and returns the result
// By default, Build() will validate if the given structure is valid
func (b *SecuritySchemeBuilder) Build(options ...Option) (SecurityScheme, error) {
	b.lock.Lock()
	defer b.lock.Unlock()
	if b.target == nil {
		return nil, errors.New(`builder has already been used`)
	}
	validate := true
	for _, option := range options {
		switch option.Name() {
		case optkeyValidate:
			validate = option.Value().(bool)
		}
	}
	if validate {
		if err := b.target.Validate(false); err != nil {
			return nil, errors.Wrap(err, `validation failed`)
		}
	}
	defer func() { b.target = nil }()
	return b.target, nil
}

// NewSecurityScheme creates a new builder object for SecurityScheme
func NewSecurityScheme(typ string, options ...Option) *SecuritySchemeBuilder {
	var lock sync.Locker = &sync.Mutex{}
	for _, option := range options {
		switch option.Name() {
		case optkeyLocker:
			lock = option.Value().(sync.Locker)
		}
	}
	var b SecuritySchemeBuilder
	if lock == nil {
		lock = nilLock{}
	}
	b.lock = lock
	b.target = &securityScheme{
		typ: typ,
	}
	return &b
}

// Description sets the description field for object SecurityScheme.
func (b *SecuritySchemeBuilder) Description(v string) *SecuritySchemeBuilder {
	b.lock.Lock()
	defer b.lock.Unlock()
	if b.target == nil {
		return b
	}
	b.target.description = v
	return b
}

// Name sets the name field for object SecurityScheme.
func (b *SecuritySchemeBuilder) Name(v string) *SecuritySchemeBuilder {
	b.lock.Lock()
	defer b.lock.Unlock()
	if b.target == nil {
		return b
	}
	b.target.name = v
	return b
}

// In sets the in field for object SecurityScheme.
func (b *SecuritySchemeBuilder) In(v string) *SecuritySchemeBuilder {
	b.lock.Lock()
	defer b.lock.Unlock()
	if b.target == nil {
		return b
	}
	b.target.in = v
	return b
}

// Flow sets the flow field for object SecurityScheme.
func (b *SecuritySchemeBuilder) Flow(v string) *SecuritySchemeBuilder {
	b.lock.Lock()
	defer b.lock.Unlock()
	if b.target == nil {
		return b
	}
	b.target.flow = v
	return b
}

// AuthorizationURL sets the authorizationURL field for object SecurityScheme.
func (b *SecuritySchemeBuilder) AuthorizationURL(v string) *SecuritySchemeBuilder {
	b.lock.Lock()
	defer b.lock.Unlock()
	if b.target == nil {
		return b
	}
	b.target.authorizationURL = v
	return b
}

// TokenURL sets the tokenURL field for object SecurityScheme.
func (b *SecuritySchemeBuilder) TokenURL(v string) *SecuritySchemeBuilder {
	b.lock.Lock()
	defer b.lock.Unlock()
	if b.target == nil {
		return b
	}
	b.target.tokenURL = v
	return b
}

// Scopes sets the scopes field for object SecurityScheme.
func (b *SecuritySchemeBuilder) Scopes(v StringMap) *SecuritySchemeBuilder {
	b.lock.Lock()
	defer b.lock.Unlock()
	if b.target == nil {
		return b
	}
	b.target.scopes = v
	return b
}

// Reference sets the $ref (reference) field for object SecurityScheme.
func (b *SecuritySchemeBuilder) Reference(v string) *SecuritySchemeBuilder {
	b.lock.Lock()
	defer b.lock.Unlock()
	if b.target == nil {
		return b
	}
	b.target.reference = v
	return b
}

// Extension sets an arbitrary element (an extension) to the
// object SecurityScheme. The extension name should start with a "x-"
func (b *SecuritySchemeBuilder) Extension(name string, value interface{}) *SecuritySchemeBuilder {
	b.lock.Lock()
	defer b.lock.Unlock()
	if b.target == nil {
		return b
	}
	b.target.extensions[name] = value
	return b
}
