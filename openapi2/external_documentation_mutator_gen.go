package openapi2

// This file was automatically generated by gentypes.go
// DO NOT EDIT MANUALLY. All changes will be lost

import (
	"sync"
)

// ExternalDocumentationMutator is used to build an instance of ExternalDocumentation. The user must
// call `Apply()` after providing all the necessary information to
// the new instance of ExternalDocumentation with new values
type ExternalDocumentationMutator struct {
	lock   sync.Locker
	proxy  *externalDocumentation
	target *externalDocumentation
}

// Apply finalizes the matuation process for ExternalDocumentation and returns the result
func (m *ExternalDocumentationMutator) Apply() error {
	m.lock.Lock()
	defer m.lock.Unlock()
	*m.target = *m.proxy
	return nil
}

// MutateExternalDocumentation creates a new mutator object for ExternalDocumentation
// Operations on the mutator are safe to be used concurrently, except for
// when calling `Apply()`, where the user is responsible for restricting access
// to the target object to be mutated
func MutateExternalDocumentation(v ExternalDocumentation, options ...Option) *ExternalDocumentationMutator {
	var lock sync.Locker = &sync.Mutex{}
	for _, option := range options {
		switch option.Name() {
		case optkeyLocker:
			lock = option.Value().(sync.Locker)
		}
	}
	if lock == nil {
		lock = nilLock{}
	}
	return &ExternalDocumentationMutator{
		lock:   lock,
		target: v.(*externalDocumentation),
		proxy:  v.Clone().(*externalDocumentation),
	}
}

// URL sets the URL field for object ExternalDocumentation.
func (m *ExternalDocumentationMutator) URL(v string) *ExternalDocumentationMutator {
	m.lock.Lock()
	defer m.lock.Unlock()
	m.proxy.url = v
	return m
}

// Description sets the Description field for object ExternalDocumentation.
func (m *ExternalDocumentationMutator) Description(v string) *ExternalDocumentationMutator {
	m.lock.Lock()
	defer m.lock.Unlock()
	m.proxy.description = v
	return m
}

// Extension sets an arbitrary extension field in ExternalDocumentation
func (m *ExternalDocumentationMutator) Extension(name string, value interface{}) *ExternalDocumentationMutator {
	if m.proxy.extensions == nil {
		m.proxy.extensions = Extensions{}
	}
	m.proxy.extensions[name] = value
	return m
}
